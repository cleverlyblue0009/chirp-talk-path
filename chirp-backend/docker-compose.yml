

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: chirp_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Thunderheart451!
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./node-api/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chirp_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache and Queue
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO bucket
  
  
  # Create MinIO bucket
  minio-setup:
    image: minio/mc:latest
    depends_on:
    - minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin; do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/chirp-path --ignore-existing;
      /usr/bin/mc anonymous set public minio/chirp-path;
      exit 0;
      "

  # Node.js API
  node-api:
    build:
      context: ./node-api
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:Thunderheart451!@localhost:5432/chirp_db?schema=public
      - REDIS_URL=redis://localhost:6379
      - S3_BUCKET=chirp-path
      - S3_REGION=us-east-1
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_ENDPOINT=http://localhost:9000
      - PY_API_URL=http://localhost:8000
      - FIREBASE_PROJECT_ID=talkiebuddy-1613d
      - FIREBASE_CLIENT_EMAIL=firebase-adminsdk-fbsvc@talkiebuddy-1613d.iam.gserviceaccount.com
      - FIREBASE_PRIVATE_KEY=-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAHErY+OMze7Ql\ndvSZS5P6tFBuVX6b9xVL4xRi/5s4SdSDj8o6maJm9xx+w80aSjMV6H1xSr3CXHN0\nNQBYQ9cZdTnOCsE5Mmf/8T2rB1VgAgvUBQhuESp5Ki5Q9WmXJ1xOe5J3t5xn77Yt\n/1KpbMYKwltCvk2n+o1t8+EKB2JjVcFeOFXpVtc4Ad0/X3aiZ1V4Asz1cLiLwSBC\nZ3BapDb5w3khwjsHxJ3Upd0CUScrPf+EZkIUp0O/1YQhGlapr2p7AUNCR5G7HH6Q\ncsjVe8OMI+NxEb19r1w8310+xSCOtNsLIO9cJ1MuZTIBOWIF8bITKVcPG8ZfiuyN\nJRwKgFu7AgMBAAECggEAXKCHmiwO6DDaAEJl10/wjq3IJhrEzBCLTSa1GrKhtbcr\nZy+6Uxzmh/zX2WsxBl8GWKbbbPebnQ4UgNBZVTWIjfbOo0DeP2TFbktz73W+vWbf\nKyAuG1vdfcRPxqs9eSr6P8EnMt/t4tNapLz5r0UKDAAAHqNBMCAHdx9ivwImdzv4\nsWhmSwGcVopTExfjiZSwPvneBkAIIhpTMrNnI6/oy9p5d+kCSvxbCieZfnOjXfQA\nMjZYj9uaE7iwiWN8ffejkNr9patMPh2cSZbRjlPKNmYsXStL7aMaRyztNY4ZdBFS\nhMb0BfIWvslqp8M59Ywb6mxT+lIr3y9AHxwBwAEowQKBgQDp/0TDMRRl6EMduj1l\nC3fj/1Ka/P3aIE2vGDCK/YxvEV30rLBSuhvScX5JAKS7CLq3G3T6aKHvrO7w1YaE\nAQ94e9/1PnbevwJrhRZsK4DxMdXdLYJ3Ko82/VOTCjBl59qZRE/BVSofZt3akt3p\n6Z/0hlGXTcqFeXm4JudME7AsWwKBgQDSLLzLBaVkTq2ubCX13te1CnVBsdG10mjT\nnUiZXM8XEdd8rT32PO68FmdZG6mB39/0d+S9mqqAtenOSCJUYnsSKer2uUgbs6KK\nkIQ8ik7g8z4AZ1rde8M2sETboLvZ7i4gk2apn/xD1m8llLohLuEb/DyaBWbA3hHs\nWYE7/3EsIQKBgGTSloA8D3vxXanba0S0ck4M3zzksURhEtfU5mWc5fudUgxws/CR\nPBeqyy0NV+02z6zB6d9TYiLxMmsWtcT+5/mT9mWnKnTDfHlzeLvW6tICFRId388U\nyWx6Lp52j2/5PJk5c9vrpCCvo/vfuDpnbYJgtZsp648jTizoplSDTy9tAoGAXsDA\nlJ8FA4XdE2e6bXB7uyjt2CI8s0Ya8FxWYJ3Q10u55IGOD7dEwhMvoKKx9tVheCud\nOkXCXKimsdMfdv+3EGdJgNXjRmnj+6hPlaOdEBlZeIEgG/4x8jPht0ptpkCVFyad\nABgaeNLx5PV6PH+QCTfccmvA+W6kkfOAKfZtpUECgYAeIGPGVzeBiEvTaKwQboZL\nII6Y++Zd2m+ddGaQ3eMB5w/zGyltOceOnQB8taPwOmf3wCMJm5l7k7kKLwbiPa0g\nMNRMIsRIH/0ll2hA5XPX8m4f6sPYuPRkQkul1uz/ybMLXd30n+vLPlnRGvS7xZlf\nVlE4p/kX7fMi1Si2rLInQg==\n-----END PRIVATE KEY-----\n
      - JWT_SECRET=your_super_secret_jwt_key_here
      - NODE_ENV=development
      - PORT=3000
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000
      - TTS_PROVIDER=mock
      - ANALYSIS_CONSENT_RETENTION_DAYS=365
    ports:
      - "3000:3000"
    volumes:
      - ./node-api:/app
      - /app/node_modules
      - ./node-api/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Python AI Service
  python-ai:
    build:
      context: ./python-ai
      dockerfile: Dockerfile
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
      - WHISPER_MODEL_SIZE=base
      - DEVICE=auto
    ports:
      - "8000:8000"
    volumes:
      - ./python-ai:/app
      - python_models:/app/models
      - ./python-ai/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@chirp.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  minio_data:
  python_models:
  pgadmin_data: